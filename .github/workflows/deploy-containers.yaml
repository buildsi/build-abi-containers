name: "Deploy Base Containers"

on:
  push:
    branches:
      - main
 

jobs:
  list-testers:
    name: List Testers
    runs-on: ubuntu-latest
    outputs:
      testers: ${{ steps.list.outputs.testers }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2        
      - name: Save testers list
        id: list
        run: |
          cd testers
          testers=$(python -c 'import os, json; print(json.dumps(os.listdir(".")))')  
          echo "Found testers $testers"
          echo '::set-output name=testers::$testers'

  build-containers:
    needs:
      - list-testers
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tester: ${{ fromJson(needs.list-testers.outputs.testers) }}
    name: Build ${{ matrix.tester }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build and Deploy
        env:
          # registry organization
          registry: quay.io/buildsi

        run: |
            git fetch
            printf "Looking for changes in tester ${{ matrix.tester }}\n"
            cd docker/${{ matrix.tester }}
            newbuilds=no
            commit=$(git rev-parse HEAD)
            printf "Looking for changed containers with commit $commit\n"
            for dockerfile in $(git diff-tree --no-commit-id --name-only -r HEAD .); do

                if [ ! -f "$dockerfile" ]; then
                    printf "Dockerfile ${dockerfile} does not exist, skipping.\n"
                    continue
                fi
                printf "Found changed Dockerfile ${dockerfile}\n"

                # A version file must exist
                tester_dir=$(dirname $dockerfile)
                if [ ! -f "$tester_dir/versions" ]; then
                    printf "versions text file missing for $dockerfile."
                    exit 1
                fi
                versions=$(cat $tester_dir/versions)
                newbuilds=yes
                filename=$(basename $dockerfile)
                for version in ${versions}; do                  
                    container=${{ env.registry }}/${{ matrix.tester }}:${version}
                    printf "Building ${dockerfile} with version ${version} to container ${container}\n"  
                    docker build -f ${filename} --build-arg LIBRARY_VERSION=${version} -t ${container} .
                done
            done

            if [ "${newbuilds}" == "yes" ]; then
                docker images
                echo ${{ secrets.DOCKER_PASSWORD }} | docker login quay.io -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
                for version in ${!versions}; do
                    container=${{ env.registry }}/${{ matrix.tester }}:${version}
                    printf "Deploying ${container}\n"
                    docker push ${container}
                done
            else
                printf "No new builds\n"
            fi
